{"version":3,"sources":["components/Attribution.js","components/Header.js","components/NewNote.js","components/Note.js","components/NotesFilter.js","components/NoteList.js","components/ReorderNotes.js","App.js","index.js"],"names":["Attribution","className","href","target","rel","Header","toggleColorMode","colorMode","onClick","NewNote","handleChange","handleSubmit","newNote","onSubmit","e","type","placeholder","value","onChange","Note","note","index","completeHandler","deleteHandler","onDragStart","onDragOver","onDrop","onDragLeave","classNameDnD","draggable","data-position","completed","title","NotesFilter","getFilter","useState","selectedItem","setSelectedItem","filterNotes","selected","NoteList","setNewNote","notes","setNotes","notesList","setNotesList","windowWidth","setWindowWidth","notesLeft","setNotesLeft","useEffect","updateScreenSize","window","addEventListener","removeEventListener","getNotesLeft","innerWidth","filterHandler","filter","item","length","clearCompletedNotes","initialDnDState","draggedFrom","draggedTo","isDragging","originalOrder","updatedOrder","preventDefault","id","Math","floor","random","dragAndDrop","setDragAndDrop","initialPosition","Number","currentTarget","dataset","position","dataTransfer","setData","newList","itemDragged","remainingItems","slice","map","DragToReorderList","ReorderNotes","App","setColorMode","bodyElement","document","body","classList","remove","add","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.65808e1a.chunk.js","sourcesContent":["const Attribution = () => {\r\n    return ( \r\n        <div className=\"attribution\">\r\n            Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\" rel=\"noreferrer\">Frontend Mentor</a>. \r\n            Coded by <a href=\"https://github.com/IevgeniiaAbdulina/Note-React#screenshot\">Ievgeniia Abdulina</a>.\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Attribution;","\r\nconst Header = ({toggleColorMode, colorMode}) => {\r\n    return ( \r\n        <div className=\"header\">\r\n            <h1 className=\"title\">T O D O</h1>\r\n            <div className={`color-theme ${colorMode}`} onClick={toggleColorMode}></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Header;","\r\nconst NewNote = ({ handleChange, handleSubmit, newNote, colorMode }) => {\r\n    return ( \r\n        <div className={`new-note ${colorMode}`}>\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                <input \r\n                    className={`container ${colorMode}`}\r\n                    type=\"text\" \r\n                    placeholder='Create a new note...'\r\n                    value={newNote}\r\n                    onChange={(e) => handleChange(e)}\r\n                />\r\n             </form>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NewNote;","\r\nconst Note = ({ \r\n        note, \r\n        index, \r\n        completeHandler, \r\n        deleteHandler, \r\n        colorMode, \r\n        onDragStart, \r\n        onDragOver, \r\n        onDrop, \r\n        onDragLeave, \r\n        classNameDnD \r\n    }) => {\r\n    \r\n    return ( \r\n        <div \r\n            className={`note ${colorMode} ${classNameDnD}`} \r\n\r\n            draggable='true'  \r\n            onDragStart={onDragStart}\r\n            onDragOver={onDragOver}\r\n            onDrop={onDrop}\r\n            data-position={index}\r\n            onDragLeave={onDragLeave}\r\n            >\r\n            <div className=\"wrapper\">\r\n                <div onClick={completeHandler}\r\n                    className={`mark ${!note.completed ? 'uncompleted' : 'completed'} ${colorMode}`}\r\n                ></div>\r\n                <div className={`title-note ${colorMode}`}>{note.title}</div>\r\n            </div>\r\n            <div onClick={deleteHandler} className=\"btn-delete\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Note;","import {useState} from \"react\";\r\n\r\nconst NotesFilter = ({getFilter, colorMode}) => {\r\n    const [selectedItem, setSelectedItem] = useState('all');\r\n\r\n    const filterNotes = (selected) => {\r\n        setSelectedItem(selected);\r\n        getFilter(selected);\r\n    }\r\n    \r\n    return ( \r\n        <div className={`notes-filter container ${colorMode}`}>\r\n            <div onClick={() => filterNotes('all')} className={`notes-all ${selectedItem === 'all' ? 'selected' : ''} ${colorMode}`}>All</div>\r\n            <div onClick={() => filterNotes('active')} className={`notes-active ${selectedItem === 'active' ? 'selected' : ''} ${colorMode}`}>Active</div> \r\n            <div onClick={() => filterNotes('completed')} className={`notes-completed ${selectedItem === 'completed' ? 'selected' : ''} ${colorMode}`}>Completed</div> \r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NotesFilter;","import { useEffect, useState } from \"react\";\r\nimport NewNote from \"./NewNote\";\r\nimport Note from \"./Note\"\r\nimport NotesFilter from \"./NotesFilter\";\r\n\r\n\r\nconst NoteList = ({colorMode}) => {\r\n    const [newNote, setNewNote] = useState('');\r\n    const [notes, setNotes] = useState([]);\r\n    const [notesList, setNotesList] = useState([]);\r\n    const [windowWidth, setWindowWidth] = useState(0);\r\n    const [notesLeft, setNotesLeft] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setNotesList(notes);\r\n    }, [notes]);\r\n\r\n    useEffect(() => {\r\n        updateScreenSize();\r\n        window.addEventListener('resize', updateScreenSize);\r\n        return () => {\r\n            window.removeEventListener('resize', updateScreenSize);\r\n        }\r\n    }, [windowWidth]);\r\n\r\n    useEffect(() => {\r\n        getNotesLeft();\r\n    }, [notesList, notesLeft])\r\n\r\n    const updateScreenSize = () => {\r\n        let windowWidth = typeof window !== 'undefined' ? window.innerWidth : 0;\r\n        setWindowWidth(windowWidth);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setNewNote(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setNotes([\r\n            ...notes,\r\n            {\r\n                title: newNote,\r\n                completed: false,\r\n                id: Math.floor( Math.random() * 1000)\r\n            }\r\n        ])\r\n        setNewNote('');\r\n    }\r\n\r\n    const completeHandler = (note) => {\r\n        setNotes(notes.map(item => {\r\n            if(item.id === note.id) {\r\n                return {\r\n                    ...item,\r\n                    completed: !item.completed\r\n                }\r\n            }\r\n            return item;\r\n        }))\r\n    }\r\n\r\n    const deleteHandler = (note) => {\r\n        setNotes(notes.filter(item => item.id !== note.id))\r\n    }\r\n\r\n    const filterHandler = (selected) => {\r\n        if(selected === 'active') {\r\n            setNotesList([...notes.filter(item => item.completed === false)]);\r\n        } else if(selected === 'completed') {\r\n            setNotesList([...notes.filter(item => item.completed === true)]);\r\n        } else if(selected === 'all') {\r\n            setNotesList([...notes]);\r\n        }\r\n    }\r\n\r\n    const getNotesLeft = () => {\r\n        setNotesLeft(notesList.filter(item => item.completed === false).length);\r\n    }\r\n\r\n    const clearCompletedNotes = () => {\r\n        setNotes(notes.filter(item => item.completed === false))\r\n    }\r\n\r\n\r\n    \r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n    // DRAG and DROP TO REORDER ITEMS ON THE LIST\r\n    const initialDnDState = {\r\n        draggedFrom: null,\r\n        draggedTo: null,\r\n        isDragging: false,\r\n        originalOrder: [],\r\n        updatedOrder: []\r\n    } \r\n\r\n    const DragToReorderList = () => {\r\n        const [dragAndDrop, setDragAndDrop] = useState(initialDnDState);\r\n\r\n        const onDragStart = (e) => {\r\n            const initialPosition = Number(e.currentTarget.dataset.position);\r\n    \r\n            setDragAndDrop({\r\n                ...dragAndDrop, \r\n                draggedFrom: initialPosition,\r\n                isDragging: true,\r\n                originalOrder: notesList\r\n            });\r\n\r\n            // Note: this is only for Firefox.\r\n            e.dataTransfer.setData(\"text/html\", '');\r\n    \r\n        }\r\n\r\n        const onDragOver = (e) => {\r\n            e.preventDefault();\r\n\r\n            let newList = dragAndDrop.originalOrder;\r\n\r\n            const draggedFrom = dragAndDrop.draggedFrom;\r\n\r\n            const draggedTo = Number(e.currentTarget.dataset.position);\r\n\r\n            const itemDragged = newList[draggedFrom];\r\n\r\n            const remainingItems = newList.filter((item, index) => index !== draggedFrom);\r\n\r\n            newList = [\r\n                ...remainingItems.slice(0, draggedTo),\r\n                itemDragged,\r\n                ...remainingItems.slice(draggedTo)\r\n            ];\r\n\r\n            if(draggedTo !== dragAndDrop.draggedTo) {\r\n                setDragAndDrop({\r\n                    ...dragAndDrop,\r\n                    updatedOrder: newList,\r\n                    draggedTo: draggedTo\r\n                })\r\n            }\r\n        }\r\n    \r\n        const onDrop = (e) => {\r\n            setNotesList(dragAndDrop.updatedOrder);\r\n\r\n            setDragAndDrop({\r\n                ...dragAndDrop,\r\n                draggedFrom: null,\r\n                draggedTo: null,\r\n                isDragging: false\r\n            })\r\n        }\r\n\r\n        const onDragLeave = () => {\r\n            setDragAndDrop({\r\n                ...dragAndDrop,\r\n                draggedTo: null\r\n            })\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className={`note-list container ${colorMode}`}>\r\n                {notesList.map((note, index) => \r\n                        <Note \r\n                            note={note} \r\n                            completeHandler={() => completeHandler(note)} \r\n                            deleteHandler={() => deleteHandler(note)}\r\n                            colorMode={colorMode}\r\n\r\n                            key={index}\r\n                            index={index}\r\n                            onDragStart={onDragStart}\r\n                            onDragOver={onDragOver}\r\n                            onDrop={onDrop}\r\n                            onDragLeave={onDragLeave}\r\n                            classNameDnD={`${dragAndDrop && dragAndDrop.draggedTo === Number(index) ? \"drop-area\" : \"\"}`}\r\n                        />)\r\n                }\r\n                <div className={`notes-details ${colorMode}`}>\r\n                    <div className=\"note-left\">{notesLeft} Note left</div>\r\n                    {windowWidth > 480 && (\r\n                        <div className=\"layout-desktop\">\r\n                            <NotesFilter \r\n                                getFilter={filterHandler}\r\n                                colorMode={colorMode}\r\n                             />\r\n                        </div>\r\n                    )}\r\n                    <div className={`clear-completed ${colorMode}`} onClick={clearCompletedNotes}>Clear completed</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    /////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n    \r\n    return ( \r\n        <>\r\n            <NewNote \r\n                handleChange={handleChange} \r\n                handleSubmit= {handleSubmit}\r\n                newNote={newNote}\r\n                colorMode={colorMode}\r\n            />\r\n            {DragToReorderList()}\r\n            {windowWidth < 480 && (\r\n                <div className=\"layout-mobile\">\r\n                    <NotesFilter \r\n                        getFilter={filterHandler}\r\n                        colorMode={colorMode}\r\n                     />\r\n                </div>\r\n            )}\r\n        </>\r\n     );\r\n}\r\n \r\nexport default NoteList;","const ReorderNotes = () => {\r\n    return ( \r\n        <div className=\"reorder-notes\">\r\n            Drag and drop to reorder list\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default ReorderNotes;","import { useState } from \"react\";\n\nimport './App.css';\nimport Attribution from './components/Attribution';\nimport Header from './components/Header';\nimport NoteList from './components/NoteList';\nimport ReorderNotes from './components/ReorderNotes';\n\nfunction App() {  \n    const [colorMode, setColorMode] = useState('dark-mode');\n    const bodyElement = document.body;\n\n    const toggleColorMode = () => {\n      if(colorMode === 'light-mode') {\n        setColorMode('dark-mode');\n        bodyElement.classList.remove('light-mode');\n        bodyElement.classList.add('dark-mode');\n      } else if(colorMode === 'dark-mode') {\n        setColorMode('light-mode');\n        bodyElement.classList.remove('dark-mode');\n        bodyElement.classList.add('light-mode');\n      }\n    }\n\n  return (\n    <>\n      <Header toggleColorMode={toggleColorMode} colorMode={colorMode} />\n      <NoteList colorMode={colorMode} />\n      <ReorderNotes />\n      <Attribution />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}